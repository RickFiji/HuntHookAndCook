@page "/recipes/{Category}"
@using HuntHookAndCook.Models
@using HuntHookAndCook.Data
@using Microsoft.EntityFrameworkCore
@inject HuntHookAndCookDbContext DbContext
@inject NavigationManager Navigation

<MudContainer>
    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="GoBack">
        <MudIcon Icon="@Icons.Material.Filled.ArrowBack" /> Back to Recipes
    </MudButton>
    <MudTable Items="recipes" Hover="true" Class="mt-4">
        <HeaderContent>
            <MudTh>Title</MudTh>
            <MudTh>Category</MudTh>
            <MudTh>Description</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Title">@context.Title</MudTd>
            <MudTd DataLabel="Category">@context.Category</MudTd>
            <MudTd DataLabel="Description">@context.LongDescription</MudTd>
            <MudTd>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => ShowRecipeDetails(context))">
                    View Details
                </MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

<MudDialog @bind-IsVisible="isDialogVisible" MaxWidth="MaxWidth.Medium">
    <DialogContent>
        @if (selectedRecipe != null)
        {
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h5">@selectedRecipe.Title</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.body1">@selectedRecipe.LongDescription</MudText>
                    <MudText Typo="Typo.subtitle1">Category: @selectedRecipe.Category</MudText>
                    @if (selectedRecipe.Image != null)
                    {
                        <MudImage Src="@Convert.ToBase64String(selectedRecipe.Image)" Alt="Recipe Image" />
                    }
                    <MudList T="RecipeDefinition">
                        <MudListItem>
                            <MudText Typo="Typo.h6">Ingredients</MudText>
                        </MudListItem>
                        @foreach (var ingredient in selectedRecipe.Ingredients)
                        {
                            <MudListItem>
                                <MudText Typo="Typo.body2">@ingredient.Name</MudText>
                            </MudListItem>
                        }
                    </MudList>
                    <MudList T="RecipeDefinition">
                        <MudListItem>
                            <MudText Typo="Typo.h6">Steps</MudText>
                        </MudListItem>
                        @foreach (var step in selectedRecipe.Steps)
                        {
                            <MudListItem>
                                <MudText Typo="Typo.body2">@step.Description</MudText>
                            </MudListItem>
                        }
                    </MudList>
                </MudCardContent>
            </MudCard>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="CloseDialog">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public string Category { get; set; } = string.Empty;

    private List<RecipeDefinition> recipes;
    private RecipeDefinition selectedRecipe;
    private bool isDialogVisible;

    protected override async Task OnInitializedAsync()
    {
        recipes = await DbContext.Recipe
                                 .Include(x => x.Ingredients)
                                 .Include(x => x.Steps)
                                 .Where(x => x.Category.Name == Category)
                                 .ToListAsync();
    }

    private void ShowRecipeDetails(RecipeDefinition recipe)
    {
        selectedRecipe = recipe;
        Navigation.NavigateTo($"/recipes/{recipe.Id}");
    }

    private void CloseDialog()
    {
        isDialogVisible = false;
        selectedRecipe = null;
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/recipes");
    }
}
