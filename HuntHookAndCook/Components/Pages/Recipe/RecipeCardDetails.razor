@page "/recipe/manage/details/{Id:int?}"
@using HuntHookAndCook.Models
@using HuntHookAndCook.Data
@using Microsoft.EntityFrameworkCore
@inject HuntHookAndCookDbContext DbContext
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<MudContainer>
    <MudText Typo="Typo.h4">Recipe Details</MudText>
    <MudForm @ref="form" OnValidSubmit="HandleValidSubmit">
        <MudTextField @bind-Value="recipe.Title" Label="Title" Required="true" />
        @* <MudTextField @bind-Value="recipe.Category.Name" Label="Category" Required="true" /> *@
        <MudTextField @bind-Value="recipe.ShortDescription" Label="Short Description" Required="true" />
        <MudTextField @bind-Value="recipe.LongDescription" Label="Long Description" Required="true" />
        <MudTextField @bind-Value="imageBase64" Label="Image (Base64)" />
                
        <MudGrid Spacing="20" Class="pt-5 pb-10">
            <MudItem xs="12" md="6" Class="border-grid">
                <MudText Typo="Typo.h6" Class="mt-4">Ingredients</MudText>
                @foreach (var ingredient in recipe.Ingredients)
                {
                    <MudTextField @bind-Value="ingredient.Name" Label="Name" Required="true" />
                    <MudTextField @bind-Value="ingredient.Quantity" Label="Quantity" />
                    <MudTextField @bind-Value="ingredient.Unit" Label="Unit" />
                    <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="@(() => RemoveIngredient(ingredient))">Remove</MudButton>
                }
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="AddIngredient">Add Ingredient</MudButton>
            </MudItem>

            <MudItem xs="12" md="6" Class="border-grid">
                <MudText Typo="Typo.h6" Class="mt-4">Steps</MudText>
                @foreach (var step in recipe.Steps)
                {
                    <MudTextField @bind-Value="step.Order" Label="Order" Required="true" />
                    <MudTextField @bind-Value="step.Description" Label="Description" Required="true" />
                    <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="@(() => RemoveStep(step))">Remove</MudButton>
                }
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="AddStep">Add Step</MudButton>
            </MudItem>
        </MudGrid>

        <MudButton Variant="Variant.Filled" Color="Color.Primary" Type="Submit" ButtonType="ButtonType.Submit">Save</MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="@(() => Navigation.NavigateTo("/recipes/manage"))">Cancel</MudButton>
    </MudForm>
</MudContainer>

@code {
    [Parameter] public int Id { get; set; }
    private RecipeDefinition recipe = new RecipeDefinition()
        {
            Ingredients = new List<IngredientDefinition>(),
            Steps = new List<StepDefinition>()
    };
    private MudForm form;
    private string imageBase64;

    protected override async Task OnInitializedAsync()
    {
        recipe = await DbContext.Recipe
            .Include(r => r.Category)
            .Include(r => r.Ingredients)
            .Include(r => r.Steps)
            .FirstOrDefaultAsync(r => r.Id == Id) ?? new RecipeDefinition
                {
                    Ingredients = new List<IngredientDefinition>(),
                    Steps = new List<StepDefinition>()
                };

        imageBase64 = recipe.Image != null ? Convert.ToBase64String(recipe.Image) : string.Empty;
    }

    private async Task HandleValidSubmit()
    {
        if (!string.IsNullOrEmpty(imageBase64))
        {
            recipe.Image = Convert.FromBase64String(imageBase64);
        }

        if (recipe.Id == 0)
        {
            DbContext.Recipe.Add(recipe);
        }
        else
        {
            DbContext.Recipe.Update(recipe);
        }

        await DbContext.SaveChangesAsync();
        Snackbar.Add("Recipe saved successfully!", Severity.Success);
        Navigation.NavigateTo("/recipes/manage");
    }

    private void AddIngredient()
    {
        recipe.Ingredients.Add(new IngredientDefinition());
    }

    private void RemoveIngredient(IngredientDefinition ingredient)
    {
        recipe.Ingredients.Remove(ingredient);
    }

    private void AddStep()
    {
        recipe.Steps.Add(new StepDefinition());
    }

    private void RemoveStep(StepDefinition step)
    {
        recipe.Steps.Remove(step);
    }
}