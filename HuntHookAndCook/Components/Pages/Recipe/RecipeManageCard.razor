@page "/recipes/manage/card/{Id:int?}"
@using HuntHookAndCook.Models
@using HuntHookAndCook.Data
@using Microsoft.EntityFrameworkCore
@inject HuntHookAndCookDbContext DbContext
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="GoBack" Class="mb-5">
    <MudIcon Icon="@Icons.Material.Filled.ArrowBack" /> Back to Manage Recipes
</MudButton>

<MudCard Class="pa-3">
    <MudText Typo="Typo.h4">Recipe Details</MudText>
    <MudForm Model="@_recipe" @ref="@_form" OnValidSubmit="HandleValidSubmit">
        <MudCardContent Class="mb-2">
            <MudTextField @bind-Value="_recipe.Title"
                          For="@(() => _recipe.Title)"
                          Label="Title"
                          Required="true"
                          Class="mb-2" />
            <MudTextField @bind-Value="_recipe.Category.Name"
                          For="@(() => _recipe.Category.Name)"
                          Label="Category"
                          Required="true"
                          Class="mb-2" />
            <MudTextField @bind-Value="_recipe.ShortDescription"
                          For="@(() => _recipe.ShortDescription)"
                          Label="Short Description"
                          Lines="2"
                          Required="true"
                          Class="mb-2" />
            <MudTextField @bind-Value="_recipe.LongDescription"
                          For="@(() => _recipe.LongDescription)"
                          Label="Long Description"
                          Lines="5"
                          Required="true" />
        </MudCardContent>

        <MudCardContent Class="mb-2">
            <MudText Typo="Typo.h6">Image</MudText>
            @if (_recipe.Image != null)
            {
                <MudImage Src="@_imageSrc" Alt="Recipe Image" Width="200" />
            }

            <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
                <ActivatorContent>
                    <MudFab Color="Color.Secondary"
                            StartIcon="@Icons.Material.Filled.Image"
                            Label="Load picture" />
                </ActivatorContent>
            </MudFileUpload>

            @if (_file != null)
            {
                <MudText Typo="@Typo.h6">File:</MudText>
                <MudList T="string">
                    
                        <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@_file">
                            @_file.Name <code>@_file.Size bytes</code>
                        </MudListItem>
                    
                </MudList>
            }
        </MudCardContent>

        <MudCardContent>
            <MudGrid Spacing="20" Class="pt-2 pb-2">
                <MudItem xs="12" md="6" Class="border-grid">
                    <MudText Typo="Typo.h6" Class="mt-4">Ingredients</MudText>
                    @if (_recipe.Ingredients != null)
                    {
                        @foreach (var ingredient in _recipe.Ingredients)
                        {
                            <MudTextField @bind-Value="ingredient.Name"
                                          For="@(() => ingredient.Name)"
                                          Label="Name"
                                          Required="true" />
                            <MudTextField @bind-Value="ingredient.Quantity"
                                          For="@(() => ingredient.Quantity)"
                                          Label="Quantity" />
                            <MudTextField @bind-Value="ingredient.Unit"
                                          For="@(() => ingredient.Unit)"
                                          Label="Unit" />
                            <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="@(() => RemoveIngredient(ingredient))" Class="mb-4">Remove</MudButton>
                        }
                    }
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="AddIngredient" Class="mb-4">Add Ingredient</MudButton>
                </MudItem>

                <MudItem xs="12" md="6" Class="border-grid">
                    <MudText Typo="Typo.h6" Class="mt-4">Steps</MudText>
                    @if (_recipe.Steps != null)
                    {
                        @foreach (var step in _recipe.Steps)
                        {
                            <MudTextField @bind-Value="step.Order" Label="Order" Required="true" Class="mb-4" />
                            <MudTextField @bind-Value="step.Description" Label="Description" Required="true" Class="mb-4" />
                            <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="@(() => RemoveStep(step))" Class="mb-4">Remove</MudButton>
                        }
                    }
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="AddStep" Class="mb-4">Add Step</MudButton>
                </MudItem>
            </MudGrid>
        </MudCardContent>

        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await HandleValidSubmit())">Save</MudButton>
        </MudCardActions>
    </MudForm>
</MudCard>

@code {
    [Parameter] public int? Id { get; set; }

    private IBrowserFile? _file;
    private MudForm? _form;
    private string? _imageSrc;
    private RecipeDefinition _recipe = new RecipeDefinition()
    {
        Category = new CategoryDefinition(),
        Ingredients = new List<IngredientDefinition>(),
        Steps = new List<StepDefinition>()
    };

    protected override async Task OnInitializedAsync()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;

        if (Id.HasValue)
        {
            _recipe = await DbContext.Recipe
                .Include(r => r.Category)
                .Include(r => r.Ingredients)
                .Include(r => r.Steps)
                .FirstOrDefaultAsync(r => r.Id == Id.Value) ?? new RecipeDefinition
                    {
                        Ingredients = new List<IngredientDefinition>(),
                        Steps = new List<StepDefinition>()
                    };

        }
        if (_recipe.Image != null)
        {
            _imageSrc = $"data:image/png;base64,{Convert.ToBase64String(_recipe.Image)}";
        }
    }

    private async Task HandleValidSubmit()
    {
        if (_recipe.Category == null)
        {
            _recipe.Category = new CategoryDefinition();
        }

        if (_recipe.Id == 0)
        {
            DbContext.Recipe.Add(_recipe);
        }
        else
        {
            DbContext.Recipe.Update(_recipe);
        }

        await DbContext.SaveChangesAsync();
        Snackbar.Add("Recipe saved successfully!", Severity.Success);
        Navigation.NavigateTo("/recipes/manage");
    }

    private async Task UploadFiles(IBrowserFile file)
    {
        _file = file;
        if (file != null)
        {
            // Check file size (example: limit to 5MB)
            const long maxFileSize = 5 * 1024 * 1024;
            if (file.Size > maxFileSize)
            {
                Snackbar.Add("File size exceeds the 5MB limit.", Severity.Error);
                return;
            }

            using var stream = new MemoryStream();
            await file.OpenReadStream(maxFileSize).CopyToAsync(stream);
            _recipe.Image = stream.ToArray();
            _imageSrc = $"data:image/png;base64,{Convert.ToBase64String(_recipe.Image)}"; 
        }
    }

    private void AddIngredient()
    {
        _recipe.Ingredients ??= new List<IngredientDefinition>();
        _recipe.Ingredients.Add(new IngredientDefinition());
    }

    private void RemoveIngredient(IngredientDefinition ingredient)
    {
        _recipe.Ingredients?.Remove(ingredient);
    }

    private void AddStep()
    {
        _recipe.Steps ??= new List<StepDefinition>();
        _recipe.Steps.Add(new StepDefinition());
    }

    private void RemoveStep(StepDefinition step)
    {
        _recipe.Steps?.Remove(step);
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/recipes/manage");
    }
}
